{"version":3,"sources":["components/Navbar.js","components/TestForm.js","components/Alert.js","App.js","index.js"],"names":["Navbar","props","className","mode","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","onClick","toggleMode","htmlFor","toggleredmode","TestForm","useState","text","setText","text2","setText2","value","style","backgroundColor","color","onChange","event","target","rows","newText","toUpperCase","toLowerCase","navigator","clipboard","writeText","alert","i","length","split","Alert","msg","proptype","title","string","isrequired","defaultProps","App","setMode","setalert","showalert","message","setTimeout","document","body","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6bcbd048.chunk.js","sourcesContent":["import React from \"react\";\r\nimport proptype from \"prop-types\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n      >\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          TextUtils\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav mr-auto\">\r\n            <li className=\"nav-item active\">\r\n              <a className=\"nav-link\" href=\"#\">\r\n                Home <span className=\"sr-only\">(current)</span>\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"form-check form-switch mx-2\">\r\n          <input\r\n            className=\"form-check-input\"\r\n            type=\"checkbox\"\r\n            id=\"flexSwitchCheckDefault\"\r\n            onClick={props.toggleMode}\r\n          />\r\n\r\n          <label\r\n            className={`form-check-label  text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            } `}\r\n            htmlFor=\"flexSwitchCheckDefault\"\r\n          >\r\n            Enable {props.mode === \"light\" ? \"dark\" : \"light\"} mode\r\n          </label>\r\n        </div>\r\n        <div className=\"form-check form-switch \">\r\n          <input\r\n            className=\"form-check-input\"\r\n            type=\"checkbox\"\r\n            onClick={props.toggleredmode}\r\n            id=\"flexSwitchCheckDefault\"\r\n          />\r\n          <label className={`form-check-label mx-1 text-${props.mode ==='light' ? 'dark' : 'light'}`} htmlFor=\"flexSwitchCheckDefault\">\r\n            Red dark mode\r\n          </label>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nNavbar.proptype = { title: proptype.string.isrequired };\r\n\r\nNavbar.defaultProps = { title: \"set title\" };\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TestForm(props) {\r\n  const [text, setText] = useState(\"\");\r\n  const [text2, setText2] = useState(\"\");\r\n\r\n  const handlechange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n  const handlechange2 = (event) => {\r\n    setText2(event.target.value);\r\n  };\r\n\r\n  const clickupchange = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n  };\r\n  const clicklochange = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n  };\r\n\r\n  const clear = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n  };\r\n\r\n  const copy = (event) =>{\r\n\r\n    navigator.clipboard.writeText(event.target.value);\r\n  }\r\n\r\n  const search = () => {\r\n    \r\n    \r\n    if (text === \"\" || text2 === \"\") {\r\n      alert(\"Your text is empty\");\r\n    } \r\n\r\n    for(let i=0;i<text.length;i++)\r\n    {\r\n      if ( text.split(\" \").[i] === text2) {\r\n        alert(\"word is present\");\r\n      }\r\n    }\r\n    \r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={`container text-${props.mode ===\"light\" ? \"dark\" : \"light\"}`}>\r\n        <div className=\"mb-3\">\r\n          <h1>Enter the Text</h1>\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            style={{backgroundColor:props.mode ===\"dark\" ? \"gray\" : \"white\", color:props.mode ===\"light\" ? \"black\" : \"white\"}}\r\n            onChange={handlechange}\r\n            rows=\"8\"\r\n          ></textarea>\r\n\r\n          {/* ---------------------------------------------buttons start here --------------------------- */}\r\n          <button\r\n            type=\"button\"\r\n            onClick={clickupchange}\r\n            className=\"btn btn-primary my-2 mx-2\"\r\n          >\r\n            Convert to Uppercase\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            onClick={clicklochange}\r\n            className=\"btn btn-primary my-2 mx-2\"\r\n          >\r\n            Convert to Lowercase\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            onClick={clear}\r\n            className=\"btn btn-primary my-2 mx-2 \"\r\n          >\r\n            Clear text\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            value={text}\r\n            onClick={copy}\r\n            className=\"btn btn-primary my-2 mx-2\"\r\n          >\r\n            copy\r\n          </button>\r\n\r\n          <nav className=\"navbar\">\r\n            <form className=\"form-inline\">\r\n              <input\r\n                className=\"form-control mr-sm-2\"\r\n                type=\"search\"\r\n                value={text2}\r\n                onChange={handlechange2}\r\n                aria-label=\"Search\"\r\n              />\r\n              <button\r\n                className=\"btn btn-success my-2 my-sm-2\"\r\n                type=\"submit\"\r\n                onClick={search}\r\n              >\r\n                Search\r\n              </button>\r\n            </form>\r\n          </nav>\r\n        </div>\r\n      </div>\r\n\r\n      {/* ------------------------------- buttons end here-------------------------------------------------------------- */}\r\n\r\n      {/* <div class=\"input-group\">\r\n        <div class=\"form-outline\">\r\n          <input type=\"search\" id=\"form1\" class=\"form-control\" />\r\n          <label class=\"form-label\" for=\"form1\">\r\n            Search\r\n          </label>\r\n          <button type=\"button\" class=\"btn btn-primary\">\r\n            <i class=\"fas fa-search\"></i>\r\n          </button>\r\n        </div>\r\n      </div> */}\r\n\r\n      {/* -----------------------------------search ends here-------------------------------------------------------------- */}\r\n\r\n      <div className={`container my-0 text-${props.mode ===\"light\" ? \"dark\" : \"light\"}`}>\r\n        <h2>Your text summary</h2>\r\n        <p>\r\n          {text.split(\" \").length} words and ${text.length} characters\r\n          \r\n        </p>\r\n        <p>Time to read : {0.8 * text.split(\" \").length} minutes</p>\r\n\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0 ? text : \"enter your text on textbox to preview\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible  show\" role=\"alert\"`}>\r\n            <strong>{props.alert.type}</strong>  : {props.alert.msg} \r\n        </div>\r\n    )\r\n}\r\n","import \"./App.css\";\nimport { useState } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport TestForm from \"./components/TestForm\";\nimport Alert from \"./components/Alert\";\n\n\nfunction App() {\n\n  const [mode,setMode] = useState('light');\n\n  const [alert, setalert] = useState(null);\n\n  const showalert = (message,type)=>{\n\n    setalert({\n      msg:message,\n      type :type\n    });\n\n    setTimeout(() => {\n      setalert(null);\n    }, 1800);\n\n  }\n  const toggleredmode = ()=> {\n    if(mode===\"light\")\n    {\n      setMode(\"dark\");\n      document.body.style.backgroundColor =\"#6f0000\";\n      showalert(\"red mode enabled\",\"primary\");\n    }\n    else{\n      setMode('light');  \n      document.body.style.backgroundColor = \"white\";\n      showalert(\"Light mode has been enbled\" , \"primary\");\n\n    }\n  }\n\n  const toggleMode = () =>{\n    if(mode === 'light')\n    {\n      setMode('dark');\n      document.body.style.backgroundColor = \"#050A30\";\n      showalert(\"Dark mode has been enbled\" , \"primary\");\n    }\n    else{\n      setMode('light');  \n      document.body.style.backgroundColor = \"white\";\n      showalert(\"Light mode has been enbled\" , \"primary\");\n\n\n    }\n  }\n\n  return (\n    <>\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} toggleredmode={toggleredmode}/>\n      <Alert alert={alert} />\n\n      <div className=\"container my-3\">\n      <TestForm mode={mode} toggleMode={toggleMode}/>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}